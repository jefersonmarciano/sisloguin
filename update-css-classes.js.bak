const fs = require('fs');
const path = require('path');

// Recursively find files with the given extensions
function findFiles(dir, extensions) {
  let results = [];
  
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const itemPath = path.join(dir, item);
    
    // Skip node_modules, .git and other special directories
    if (['node_modules', '.git', 'dist', '.vite'].includes(item)) {
      continue;
    }
    
    const stat = fs.statSync(itemPath);
    
    if (stat.isDirectory()) {
      // Recursively search subdirectories
      results = results.concat(findFiles(itemPath, extensions));
    } else if (stat.isFile()) {
      // Check if file extension matches
      const ext = path.extname(item).toLowerCase();
      if (extensions.includes(ext)) {
        results.push(itemPath);
      }
    }
  }
  
  return results;
}

// Check if a file contains the 'temu-' pattern
function fileContainsCssPattern(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return content.includes('temu-');
  } catch (error) {
    console.error(`Error checking file ${filePath}:`, error);
    return false;
  }
}

// Replace CSS class names in a file
function updateCssClasses(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Replace CSS class patterns
    const patterns = [
      { regex: /text-temu-([a-zA-Z0-9]+)/g, replacement: 'text-sisloguin-$1' },
      { regex: /bg-temu-([a-zA-Z0-9]+)/g, replacement: 'bg-sisloguin-$1' },
      { regex: /border-temu-([a-zA-Z0-9]+)/g, replacement: 'border-sisloguin-$1' },
      { regex: /from-temu-([a-zA-Z0-9]+)/g, replacement: 'from-sisloguin-$1' },
      { regex: /to-temu-([a-zA-Z0-9]+)/g, replacement: 'to-sisloguin-$1' },
      { regex: /focus:ring-temu-([a-zA-Z0-9]+)/g, replacement: 'focus:ring-sisloguin-$1' },
      { regex: /hover:bg-temu-([a-zA-Z0-9]+)/g, replacement: 'hover:bg-sisloguin-$1' },
      { regex: /hover:text-temu-([a-zA-Z0-9]+)/g, replacement: 'hover:text-sisloguin-$1' },
      { regex: /hover:border-temu-([a-zA-Z0-9]+)/g, replacement: 'hover:border-sisloguin-$1' },
      { regex: /temu-card/g, replacement: 'sisloguin-card' },
      { regex: /temu-button/g, replacement: 'sisloguin-button' },
    ];
    
    let newContent = content;
    patterns.forEach(({ regex, replacement }) => {
      newContent = newContent.replace(regex, replacement);
    });
    
    if (content !== newContent) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`Updated CSS classes in: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`Error updating CSS classes in ${filePath}:`, error);
    return false;
  }
}

// Main execution
console.log('Starting CSS class name updates...');
try {
  // Find all files with relevant extensions
  const extensions = ['.tsx', '.ts', '.jsx', '.js', '.css'];
  const allFiles = findFiles('.', extensions);
  console.log(`Found ${allFiles.length} files with relevant extensions`);
  
  // Filter files that contain 'temu-' pattern
  const relevantFiles = allFiles.filter(fileContainsCssPattern);
  console.log(`Found ${relevantFiles.length} files with CSS classes to update`);
  
  let updatedCount = 0;
  relevantFiles.forEach(file => {
    if (updateCssClasses(file)) {
      updatedCount++;
    }
  });
  
  console.log(`Updated CSS classes in ${updatedCount} files`);
} catch (error) {
  console.error('Error:', error);
} 